name: 'Experiment Report'
description: 'Generates and archives reports comparing Develocity builds for an experiment.'

inputs:
  api-key:
    description: 'API key for accessing Develocity services'
    required: true
  url:
    description: 'URL of the Develocity server'
    required: true
  task:
    description: 'The task used in the experiment'
    required: true
  max-builds:
    description: 'Maximum number of builds to fetch for the comparison (default is 200)'
    required: false
    default: 200
  experiment-id:
    description: 'Unique identifier for the experiment'
    required: true
  tags:
    description: 'Comma-separated tags to filter the builds for comparison'
    required: true
  profile:
    description: 'Enable or disable profiling during the comparison'
    required: true
  gh_token:
    description: 'GitHub token for authentication'
    required: true
  taskpathreport:
    description: 'Enable or disable task path reporting'
    required: true
  processreport:
    description: 'Enable or disable process reporting'
    required: true
  kotlinreport:
    description: 'Enable or disable Kotlin build reporting'
    required: true
  tasktypereport:
    description: 'Enable or disable task type reporting'
    required: true
  resourceusagereport:
    description: 'Enable or disable resource usage reporting'
    required: true
  onlycacheableoutcome:
    description: 'Enable or disable reporting only for cacheable outcomes'
    required: true
  thresholdtaskduration:
    description: 'Threshold of task duration for the task path report'
    required: true
    default: 1000
  repository:
    description: 'GitHub repository to check out'
    required: true
  run_id:
    description: 'Run ID'
    required: false
  mode:
    description: 'Mode of the experiment'
    required: false
  experiment_title:
    description: 'Title of the experiment'
    required: false
  open-ai-request: 
    description: 'OpenAI request'
    required: true
    default: false
  open-ai-api-key:
    description: 'OpenAI API key'
    required: false
    default: ""


runs:
  using: 'composite'
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: 17

    - name: Execute CompareGEBuilds
      id: compareBuilds
      run: |
        # Download and set permissions for the CompareGEBuilds binary
        curl -L https://github.com/cdsap/CompareGEBuilds/releases/download/v0.5.6/build-experiment-results --output build-experiment-results
        chmod 0757 build-experiment-results

        # Parse and format tags input into the required format
        tags="${{ inputs.tags }}"
        arrayTags=(${tags//,/ })
        tagsParsed=""
        for val in "${arrayTags[@]}"; do
          tagsParsed="$tagsParsed --variants=$val"
        done

        # Set optional flags based on input values
        profile=""
        if [ "${{ inputs.profile }}" == "true" ]; then
          profile="--profile"
        fi

        taskpathreport="--task-path-report"
        if [ "${{ inputs.taskpathreport }}" == "false" ]; then
          taskpathreport="--no-task-path-report"
        fi

        processreport="--process-report"
        if [ "${{ inputs.processreport }}" == "false" ]; then
          processreport="--no-process-report"
        fi

        kotlinreport="--kotlin-build-report"
        if [ "${{ inputs.kotlinreport }}" == "false" ]; then
          kotlinreport="--no-kotlin-build-report"
        fi

        tasktypereport="--task-type-report"
        if [ "${{ inputs.tasktypereport }}" == "false" ]; then
          tasktypereport="--no-task-type-report"
        fi

        resourceusagereport="--resource-usage-report"
        if [ "${{ inputs.resourceusagereport }}" == "false" ]; then
          resourceusagereport="--no-resource-usage-report"
        fi

        onlycacheableoutcome="--only-cacheable-outcome"
        if [ "${{ inputs.onlycacheableoutcome }}" == "false" ]; then
          onlycacheableoutcome="--no-only-cacheable-outcome"
        fi

        if [ "${{ inputs.open-ai-request }}" == "true" ]; then
          openai_request="--openai-request"
        else
          openai_request="--no-openai-request"
        fi

        if [ "${{ inputs.open-ai-api-key }}" != "" ]; then
          openai_api_key="--openai-api-key ${{ inputs.open-ai-api-key }}"
        else
          openai_api_key=""
        fi

        thresholdtaskduration="--threshold-task-duration ${{ inputs.thresholdtaskduration }}"

        # Execute the comparison with the appropriate arguments
        URL="${{ inputs.url }}"
        MAX_BUILDS="${{ inputs.max-builds }}"
        REPOSITORY="${{ inputs.repository }}"
        EXPERIMENT_ID="${{ inputs.experiment-id }}"
        RUN_ID="${{ inputs.run_id }}"
        API_KEY="${{ inputs.api-key }}"
     
        ./build-experiment-results --url="$URL" \
          $tasktypereport $resourceusagereport $onlycacheableoutcome $taskpathreport $processreport \
          $kotlinreport $thresholdtaskduration $profile $openai_request $openai_api_key \
          --max-builds="$MAX_BUILDS" $tagsParsed \
          --repository="$REPOSITORY" \
          --experiment-id="$EXPERIMENT_ID" \
          --experiment-run-id="$RUN_ID" \
          --api-key="$API_KEY"

        # Output the results to the GitHub step summary
        CONTENT=$(cat experiment_results_summary_gha)
        echo "$CONTENT" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Archive Comparison Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-comparison-reports
        path: |
          experiment_results*
        if-no-files-found: error

    - name: Checkout gh-pages branch
      uses: actions/checkout@v4
      with:
        ref: gh-pages
        path: .

    - name: Download experiment results
      uses: actions/download-artifact@v4
      with:
        name: build-comparison-reports
        path: temp-results

    - name: Update gh-pages content
      shell: bash
      run: |
        TIMESTAMP=$(date +%Y-%m-%d)
        EXPERIMENT_FILE="_posts/${TIMESTAMP}-${{ inputs.experiment-id }}-experiment.md"
        html_file=$(ls temp-results/*.html | head -n 1)
        html_filename=$(basename "$html_file")   

        analysis_file=$(ls temp-results/experiment_results_openai_analysis_* 2>/dev/null | head -n 1)
        title_file=$(ls temp-results/experiment_results_openai_title_* 2>/dev/null | head -n 1)

        # Initialize empty variables
        analysis_content=""
        title_content=""

        # Check if the analysis file exists before reading it
        if [[ -f "$analysis_file" ]]; then
            analysis_content=$(cat "$analysis_file")
        else
            echo "Analysis file not found."
        fi

        # Check if the title file exists before reading it
        if [[ -f "$title_file" ]]; then
            title_content=$(cat "$title_file")
        else
            echo "Title file not found."
        fi
        



        cp temp-results/experiment_results* "reports/"
        if [ "${{ inputs.profile }}" == "true" ]; then
          tagsreport="gradle-profiler"
        else
          tagsreport="${{ inputs.mode }}"
        fi
        if [ "${{ inputs.experiment_title }}" != "" ]; then
          EXPERIMENT_TITLE="${{ inputs.experiment_title }}"
        else
          EXPERIMENT_TITLE="${{ inputs.repository }}-${{ inputs.task }}"
        fi

        if [[ -n "$title_content" ]]; then
           DESCRIPTION="\"$title_content\""
        else
           DESCRIPTION= "\"variants: ${VARIANTS//${EXPERIMENT_ID}_/}\""
        fi

        if [ ! -f "$EXPERIMENT_FILE" ]; then
          VARIANTS="${{ inputs.tags }}"
          EXPERIMENT_ID="${{ inputs.experiment-id }}"
          echo "---" > "$EXPERIMENT_FILE"
          echo "layout: post" >> "$EXPERIMENT_FILE"
          echo "title: \"$EXPERIMENT_TITLE\"" >> "$EXPERIMENT_FILE"
          echo "date: $TIMESTAMP" >> "$EXPERIMENT_FILE"
          echo "report_link: /Telltale/reports/$html_filename" >> "$EXPERIMENT_FILE"
          echo "description: $DESCRIPTION" >> "$EXPERIMENT_FILE"
          echo "tags: \"$tagsreport\"" >> "$EXPERIMENT_FILE"
          echo "---" >> "$EXPERIMENT_FILE"
          echo "$analysis_content" >> "$EXPERIMENT_FILE"
        fi

    - name: Push Experiment Results
      shell: bash    
      run: |
        git config user.email inaki.seri@gmail.com
        git config user.name "inaki"
        git add _posts
        git add reports
        git commit -m "Add experiment results for ${{ inputs.experiment-id }}"
        git push https://x-access-token:${{ inputs.gh_token }}@github.com/cdsap/Telltale.git gh-pages
